// use set to sort them

class Solution {
public:
    bool isDiglog(string log, int &i){
        i=0;
        while(log[i]!=' ') i++;
        return log[i+1] < 'a';
    }
    vector<string> reorderLogFiles(vector<string>& logs) {
        set<pair<string,string>> sett;
        vector<string> diglogs;
        vector<string> res;
        int i;
        for(auto log:logs){
            if(isDiglog(log,i)){
                diglogs.push_back(log);
            }
            else{
                sett.insert({log.substr(i),log.substr(0,i)});
            }
        }
        for(auto it:sett) res.push_back(it.second+it.first);
        for(auto log:diglogs) res.push_back(log);
        return res;
        
    }
};

// Custom Comp 
class Solution {
public:
    vector<string> reorderLogFiles(vector<string>& logs) {
        
        vector<string> result;
        vector<string> digitlogs;
        vector<string> letterlogs;
        
        for(auto log:logs){
            int idx = log.find_first_of(" ");
            if(isalpha(log[idx+1])) letterlogs.push_back(log);
            else digitlogs.push_back(log);
        }
        sort(letterlogs.begin(),letterlogs.end(), [] (const string &s1, const string &s2){
            
        
            
            int idx1 = s1.find_first_of(" ");
            string id1 = s1.substr(0,idx1);
            string log1 = s1.substr(idx1+1);
             
            int idx2 = s2.find_first_of(" ");
            string id2 = s2.substr(0,idx2);
            string log2 = s2.substr(idx2+1);
            
            
            return log1==log2? id1<id2 : log1<log2;   
           
        });
        
        for(auto log:letterlogs) result.push_back(log);
        for(auto log:digitlogs) result.push_back(log);
        return result;
        
    }
};
