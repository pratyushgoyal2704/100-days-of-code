class Solution {
public:
    int minOperations(vector<vector<int>>& grid, int x) {
        int m = grid.size();
        int n = grid[0].size();
        int size = m*n;
        vector<int> arr;
        
        int mod = grid[0][0] % x;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[i].size();j++){
                arr.push_back(grid[i][j]);
                if(grid[i][j]%x != mod){
                    return -1;
                }
            }
        }
        
        sort(arr.begin(),arr.end());
        
        int ans3 = 0;
        int ans1 = 0;
        int ans2 = 0;
        int ans = 0;
        
        if(size%2 == 0 && size!=1){
            int median1 = arr[size/2];
            int median2 = arr[(size/2) -1];
            for(int i=0;i<size;i++){
                ans1 += abs(arr[i]-median1) / x;
                ans2 += abs(arr[i]-median2) / x;
            }
            ans3 = min(ans1,ans2);
        }
        else{
            int median = arr[size/2];
            for(int i=0;i<size;i++){
                ans3 += abs(arr[i]-median) / x;
            }
           
        }  
        return ans3;
    }
};
