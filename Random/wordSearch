// 12/03/21
class Solution {
public:
    
    bool dfs(vector<vector<char>>& board, int row, int col, int pos, string word) {
        if (pos == word.size()) {
            return true;
        }
        
        if (row >= board.size() || col >= board[0].size() || row < 0 || col < 0
           || word[pos] != board[row][col]) {
            return false;
        }
        
        char temp = board[row][col];
        board[row][col] = ' ';
        bool found = dfs(board,row+1,col,pos+1,word) || 
                     dfs(board,row,col+1,pos+1,word) || 
                     dfs(board,row-1,col,pos+1,word) ||     
                     dfs(board,row,col-1,pos+1,word);
        board[row][col] = temp;
        return found;
            
    }
    
    bool exist(vector<vector<char>>& board, string word) {
        for(int i = 0; i < board.size(); i++) {
            for(int j = 0; j < board[0].size(); j++) {
                if(board[i][j] == word[0] && dfs(board,i,j,0,word)) {
                    return true;
                }
            }
        }
        return false;
    }
};


class Solution {
public:
    
    bool bfs(vector<vector<char>>& board, vector<vector<bool>>& visited,
             string word, int i, int j, int pos){
        if(pos==word.size()) return true;
        if(i<0 || j<0 || i>=board.size() || j>=board[0].size() || board[i][j]!=word[pos]
          ||visited[i][j]==true) 
        {
            return false; 
        }
        
        visited[i][j] = true;
        
        if(bfs(board,visited,word,i+1,j,pos+1)
          ||bfs(board,visited,word,i-1,j,pos+1)
          ||bfs(board,visited,word,i,j-1,pos+1)
          ||bfs(board,visited,word,i,j+1,pos+1)){
            return true;
        }
        
        visited[i][j] = false;
        
        return false;
    }
    
    
    bool exist(vector<vector<char>>& board, string word) {
        vector<vector<bool>> visited(board.size(),vector<bool>(board[0].size(),false));
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[i].size();j++){
                if(board[i][j]==word[0] && bfs(board,visited,word,i,j,0) ){
                   return true;
                }
            }
        }
        return false;
    }
};
