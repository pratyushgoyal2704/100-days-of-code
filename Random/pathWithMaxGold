class Solution {
    
    int dfs(vector<vector<int>>& grid, int i, int j) {
        if ( i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size()
           || grid[i][j] == 0) {
            return 0;
        }
        int temp = grid[i][j];
        grid[i][j] = 0;
        int left = dfs(grid,i,j-1);
        int right = dfs(grid,i,j+1);
        int up = dfs(grid,i-1,j);
        int down = dfs(grid,i+1,j);
        grid[i][j] = temp;
        
        return max(left,max(right,max(up,down))) + grid[i][j];
        
    }
    
    
public:
    int getMaximumGold(vector<vector<int>>& grid) {
        int maxx = 0;
        for(int i = 0; i < grid.size(); i++) {
            for(int j = 0; j < grid[0].size(); j++) {
                if(grid[i][j] != 0) {
                   maxx = max(maxx,dfs(grid,i,j));
                }
            }
        }
        return maxx;
    }
};
