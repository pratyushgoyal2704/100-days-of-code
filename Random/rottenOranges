class Solution {
public:
    

    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>> q;
        int t = 0;
        int rows = grid.size();
        int cols = grid[0].size();
        int fresh = 0;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==2) q.push({i,j});
                else if(grid[i][j]==1) fresh++;
            }
        }
        
        while(!q.empty()){
            int num = q.size();
            for(int i=0;i<num;i++){
                int x = q.front().first, y = q.front().second;
                q.pop();
                if(x-1>=0 && grid[x-1][y]==1){
                  grid[x-1][y] = 2; fresh--; q.push({x-1,y});  
                } 
                if(y-1>=0 && grid[x][y-1]==1) {
                    grid[x][y-1] = 2; fresh--; q.push({x,y-1});
                }
                if(x+1<=rows-1 && grid[x+1][y]==1) {
                    grid[x+1][y] = 2; fresh--; q.push({x+1,y});
                }
                if(y+1<=cols-1 && grid[x][y+1]==1) {
                    grid[x][y+1] = 2; fresh--; q.push({x,y+1});
                }
            }
            if(!q.empty()) t++;
        }
        return (fresh==0)?t:-1;
    }
};
