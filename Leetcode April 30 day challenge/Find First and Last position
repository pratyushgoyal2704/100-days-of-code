//Linear time
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans;
        int start = -1;
        int end = -1;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==target && start==-1){
                start=i;
                end = start;
            }
            else if(nums[i]==target && start!=-1){
                end++;
            }
        }
        ans.push_back(start);
        ans.push_back(end);
        return ans;
    }
};

//Binary Search 
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        int start = 0;
        int end = n-1;
        vector<int> ans;
        while(start<=end){
            int mid = start + (end-start)/2;
            
            if(nums[mid]==target){
                int left = mid;
                int right = mid;
                
                while(left>0 && nums[left-1]==target){
                    left--;
                }
                ans.push_back(left);
                while(right<n-1&&nums[right+1]==target){
                    right++;
                }
                ans.push_back(right);
                return ans;
            }
            else if(nums[mid]<target){
              start = mid + 1;  
            } 
            else {end = mid - 1;}
        }
        ans.push_back(-1);
        ans.push_back(-1);
        return ans;
    }
};
