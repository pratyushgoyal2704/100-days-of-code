class Solution {
public:
    int maxArea = 0;
    void callBFS(vector<vector<int>>& grid,int i,int j,int &currArea){
        if(grid[i][j]!=1 || i<0 || j<0 || i>=grid.size() || j>=grid[0].size()){
            return;
        }
        currArea++;
        maxArea = max(maxArea,currArea);
        grid[i][j] = 0;
        
        if(i+1<=grid.size()-1 && grid[i+1][j]==1)callBFS(grid,i+1,j,currArea);
        if(i-1>=0 && grid[i-1][j]==1)callBFS(grid,i-1,j,currArea);
        if(j+1<=grid[0].size()-1 && grid[i][j+1]==1)callBFS(grid,i,j+1,currArea);
        if(j-1>=0 && grid[i][j-1]==1)callBFS(grid,i,j-1,currArea);
        
    }
    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int rows = grid.size();
        int cols = grid[0].size();
          
        int currArea = 0;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==1){
                    callBFS(grid,i,j,currArea);
                    currArea = 0;
                }
            }
        }
        return maxArea;
    }
};
