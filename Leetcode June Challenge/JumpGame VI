O(nk) TLE

class Solution {
public:
    int maxResult(vector<int>& nums, int k) {
        int n = nums.size();
        if(k<1) return 0;
        vector<int> maxscore(n,0);
        maxscore[0] = nums[0];
        
        for(int i=1;i<n;i++){
        int maxx = INT_MIN;
                for(int j=i-1;j>=max(0,i-k);j--){
                    maxx = max(maxx,maxscore[j]);
                }
                maxscore[i] = maxx + nums[i]; 
            
            
        }
        return maxscore[n-1];
    }
};

O(n) Deque

class Solution {
public:
    int maxResult(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> score(nums.size());
        score[0] = nums[0];
        dq.push_back(0);
        int n = nums.size();
        for(int i=1;i<n;i++){
            while(!dq.empty() && dq.front()< i-k) dq.pop_front();
            score[i] = nums[i]+score[dq.front()];
            while(!dq.empty() && nums[i]+score[dq.front()] > score[dq.back()]) dq.pop_back();
            dq.push_back(i);
        }
        return score[n-1];
    }
};

O(nlogn) PQ
class Solution {
public:
    int maxResult(vector<int>& nums, int k) {
        priority_queue<pair<int,int>> pq;
        vector<int> score(nums.size());
        score[0] = nums[0];
        pq.push({nums[0],0});
        for(int i=1;i<nums.size();i++){
            while(!pq.empty() && pq.top().second < i-k) pq.pop();
            score[i] = nums[i] + pq.top().first;
            pq.push({score[i],i});
        }
        int n = nums.size();
        return score[n-1];
    }
};


