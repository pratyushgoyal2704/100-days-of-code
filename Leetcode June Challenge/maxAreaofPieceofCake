class Solution {
public:
    long max(long a, long b){
        return a>=b?a:b;
    }
    int maxArea(int h, int w, vector<int>& horizontalCuts, vector<int>& verticalCuts) {
        
        horizontalCuts.push_back(0);
        horizontalCuts.push_back(h);
        verticalCuts.push_back(0);
        verticalCuts.push_back(w);
        sort(horizontalCuts.begin(),horizontalCuts.end());
        sort(verticalCuts.begin(),verticalCuts.end());
        
        long maxDiffH = -1;
        for(int i=0;i<horizontalCuts.size()-1;i++){
            long currDiff = horizontalCuts[i+1] - horizontalCuts[i];
            maxDiffH = max(currDiff,maxDiffH);
        }
        
        long maxDiffW = -1;
        for(int i=0;i<verticalCuts.size()-1;i++){
            long currDiff = verticalCuts[i+1] - verticalCuts[i];
            maxDiffW = max(currDiff,maxDiffW);
        }
        
        return (int)(maxDiffW % (1000000007) * maxDiffH % (1000000007));
        // return maxDiffW*maxDiffH;
    }
};
