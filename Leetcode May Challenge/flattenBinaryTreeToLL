/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        if(root==NULL) return;
        stack<TreeNode*> st;
        st.push(root);
        while(!st.empty()){
            TreeNode* temp = st.top();
            st.pop();
            if(temp->right) st.push(temp->right);
            if(temp->left) st.push(temp->left);
            if(!st.empty())temp->right = st.top(); 
            temp->left = NULL;
        }
        return;
    }
};

//recursive

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode* flattenTree(TreeNode* root){
        if(root==NULL) return NULL;
        
        if(root->left==NULL && root->right==NULL) return root;
        
        TreeNode* lefttail = flattenTree(root->left);
        TreeNode* righttail = flattenTree(root->right);
        
        if(lefttail!=NULL) {
            lefttail->right = root->right;
            root->right = root->left;
            root->left = NULL;
        }
        return righttail == NULL? lefttail:righttail;
    }
    
    
    void flatten(TreeNode* root) {
        flattenTree(root);
        return;
        
        
        
    }
};
