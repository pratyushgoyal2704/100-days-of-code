//Java
class Solution {
    public List<String> ambiguousCoordinates(String s) {
        s = s.substring(1,s.length()-1);
        List<String> result = new LinkedList<>();
        for(int i=1;i<s.length();i++){
            List<String> left = helper(s.substring(0,i));
            List<String> right = helper(s.substring(i));
            for(String llist:left){
                for(String rlist:right){
                    result.add("("+llist+", "+rlist+")");
                }
            }
        }
        return result;
    }
    private List<String> helper(String s){
        int l = s.length();
        List<String> res = new LinkedList<>();
        char[] cs = s.toCharArray();
        if(cs[0]=='0' && cs[l-1]=='0'){
            if(l==1){
                res.add("0");
            }
            return res;
        }
        if(cs[0]=='0'){
            res.add("0."+s.substring(1));
            return res;
        }
        if(cs[l-1]=='0'){
            res.add(s);
            return res;
        }
        res.add(s);
        for(int i=1;i<l;i++){
            res.add(s.substring(0,i)+"."+s.substring(i));
        }
        return res;
    }
}
// C++
class Solution {
public:
    vector<string> ambiguousCoordinates(string s) {
        
        s = s.substr(1,s.length()-2);
        int l = s.length();
        vector<string> ans;
        for(int i=1;i<l;i++){
            vector<string> left = helper(s.substr(0,i));
            vector<string> right = helper(s.substr(i));
            for(string leftvec:left){
                for(string rightvec:right){
                    ans.push_back("("+leftvec+", "+rightvec+")");
                }
            }
        }
        return ans;
    }
    
    private: vector<string> helper(string s){
        vector<string> res;
        int l = s.length();
        if(s[0]=='0' && s[l-1]=='0'){
            if(l==1) {
                string temp = "0";
                res.push_back(temp);
            }
            return res;
        }
        if(s[0]=='0'){
            string temp = "0."+s.substr(1); 
            res.push_back(temp);
            return res;
        }
        if(s[l-1]=='0'){
            res.push_back(s);
            return res;
        }
        res.push_back(s);
        for(int i=1;i<l;i++){
            string temp = s.substr(0,i)+"."+s.substr(i);
            res.push_back(temp);
        }
        return res;
    }
};
